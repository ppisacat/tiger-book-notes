
#+BEGIN INTRO
function's stack 
talk about high-order functions: function that returns function
for languate supports nested function AND functions as returnable values, 
we *cannot* use stack to hold all variables.
#+END

* Stack Frames
** Stack Pointer
   stack: big array
   stack pointer: point at a position of array. locations beyond pointer are garbage.

** Frame
[[./stackframe.png]]

** Registers 
*** Facts about register
    - registers are fast
    - numbers of registers are limited 
    - we have to save data (r -> frame) and restore (r <- frame) when do procedure call, this cost much
*** Reduce the number of save/restore
    (this is done by Register Allocator)
    e.g, if var x is useless after calling g(), then do not save it
    e.g 2, if var x is not accessed during a series calling a() b() c(), do not restore it after each call, just restore once.
*** Passing Parameters
    we use f() -> g() to demonstrate seudo code
**** By Stack(seudo machine code)
     # alloc g_frame
     ...
     # save registers
     mv f_frame_addr1, r1
     mv f_frame_addr2, r2
     ...
     # pass args by stack, mem->reg->mem
     mv arg_1, r1
     mv g_frame_addr1, r1
     ...
     # calling g()
     mv SP, g_entry
     mv r1, g_frame_addr1
     ... g's code
     # finish g(), return
     mv SP, return_addr
     # restore registers
     mv r1, f_frame_addr1
     mv r2, f_frame_addr2
     ...
**** By Register(seudo machine code)
     # save registers (same)
     # pass args by register, mem->reg
     mv arg_1, r1
     # calling g()
     mv SP, g_entry
     ... g's code
     # As you see, pass by reg reduce many mv operations
**** How can we take advantage of passing by register?
     - /leaf function/
     - /interprocedural register allocation/
     - variable is useless after calling, so it's register can be /override without saving/
     - architecture related /register window/
*** Frame resident variables
    so, we give preference to Register. but when we have store variables in frame?
    some reasons listed:
    - a variable will passed by ref, so it has to own an address
    - value too big for register
    - array variable
    - ...
    
